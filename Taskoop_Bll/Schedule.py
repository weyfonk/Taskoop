# -*- coding: utf-8 -*-
import string
import os
import Taskoop_Bll.StringUtils as StringUtils
from datetime import date, timedelta

class Schedule:
    """ Class defining the schedule model"""

    def __init__(self):
        self._taskNb = 2
        self._tasks = []
        self._peopleNb = 2
        self._people = []
        self._frequency = string.whitespace
        self._startingPoint = date.today()
        self._loopNb = 15
        self._arePeopleInHeader = True

    # Properties
    
    def _get_taskNb(self):
        return self._taskNb
    
    def _set_taskNb(self, nb):
        self._taskNb = nb
        
    def _get_tasks(self):
        return self._tasks
    
    def _set_tasks(self, t):
        self._tasks = t
            
    def _get_peopleNb(self):
        return self._peopleNb
    
    def _set_peopleNb(self, nb):
        self._peopleNb = nb
    
    def _get_people(self):
        return self._people
    
    def _set_people(self, p):
        self._people = p
        
    def _get_frequency(self):
        return self._frequency
    
    def _set_frequency(self, f):
        self._frequency = f
        
    def _get_startingPoint(self):
        return self._startingPoint
    
    def _set_startingPoint(self, s):
        self._startingPoint = s
        
    def _get_loopNb(self):
        return self._loopNb
    
    def _set_loopNb(self, l):
        self._loopNb = l
        
    def _get_arePeopleInHeader(self):
        return self._arePeopleInHeader
    
    def _set_arePeopleInHeader(self, val):
        self._arePeopleInHeader = val
    
    taskNb = property(_get_taskNb, _set_taskNb)
    tasks = property(_get_tasks, _set_tasks)
    peopleNb = property(_get_peopleNb, _set_peopleNb)
    people = property(_get_people, _set_people)
    frequency = property(_get_frequency, _set_frequency)
    startingPoint = property(_get_startingPoint, _set_startingPoint)
    loopNb = property(_get_loopNb, _set_loopNb)
    arePeopleInHeader = property(_get_arePeopleInHeader, _set_arePeopleInHeader)
    
    # Instance methods
    
    #Generates HTML code representing the schedule
    def GenerateHTML(self):
    
        htmlCode = []
    
        headerValues = self.people if self.arePeopleInHeader else self.tasks
        nonHeaderValues = self.tasks if self.arePeopleInHeader else self.people
    
        htmlCode.append("<html>\n\t<title>Taskoop</title>\n\t")
        htmlCode.append("<body>\n\t\t<table border=\"1\">\n\t\t\t<tr>")
        htmlCode.append("<head>\n")
        htmlCode.append("<title>Taskoop</title>\n")
        htmlCode.append("<link rel=\"stylesheet\" href=\"test.css\">\n")
        htmlCode.append("</head>\n")

    
        #Header
        freqHeader = string.whitespace
        htmlCode.append("<tr>")
        if self.frequency == StringUtils.HOUR_KEY:
            freqHeader = "Time"
        elif self.frequency == StringUtils.DAY_KEY:
            freqHeader = "Day"
        elif self.frequency == StringUtils.WEEK_KEY:
            freqHeader = "Week"
        else:
            freqHeader = "Month"
        htmlCode.append("<td><b>")
        htmlCode.append(freqHeader)
        htmlCode.append("</b></td>")
    
        for name in headerValues:
            htmlCode.append("<td><b>")
            htmlCode.append(name)
            htmlCode.append("</b></td>")
        htmlCode.append("<tr>")
    
        #Data
        nbValues = len(nonHeaderValues)
        nbHeaderValues = len(headerValues)
        # Add empty tasks in case there are less tasks than people
        if nbValues < nbHeaderValues:
            for extraIndex in range(nbValues, nbHeaderValues):
                nonHeaderValues.append(string.whitespace)
        for row in range(0, self.loopNb): #nbValues * self.loopNb
            htmlCode.append("<tr>")
            # Add the column header, depending on the frequency
            htmlCode.append("<td class=\"rowHeader\"><b>")
            htmlCode.append(DisplayTimeData(self, row))
            htmlCode.append("</b></td>")
            # Add the actual data
            for index in range(0, nbHeaderValues):
                text = nonHeaderValues[index]
                htmlCode.append("<td>")
                htmlCode.append(text)
                htmlCode.append("</td>")
            htmlCode.append("</tr>")
            nonHeaderValues = PermuteArray(nonHeaderValues)
    
        version = "0.1"
    
        htmlCode.append("\n\t\t\t</tr>\n\t\t</table>\n\n\t")
        htmlCode.append("<br/>")
        htmlCode.append("Generated by Taskoop {0}.\n".format(version))
        htmlCode.append("</body>\n</html>")
        
    
        filePath = os.path.abspath("test.html")
        with open(filePath, "w+") as destFile:
            destFile.write(string.whitespace.join(htmlCode))
    
        return filePath
    

def DisplayTimeData(self, index):
    if(self.frequency == StringUtils.WEEK_KEY):
        firstDayOfWeek = self.startingPoint + timedelta(weeks = index)
        lastDayOfWeek = firstDayOfWeek + timedelta(days = 6)
        
        firstDayString = firstDayOfWeek.day
        
        if firstDayOfWeek.month != lastDayOfWeek.month:
            firstDayString = "{0}/{1}".format(firstDayString, firstDayOfWeek.month)
        
        lastDayString = "{0}/{1}".format(lastDayOfWeek.day, lastDayOfWeek.month)
        
        return "{0}-{1}".format(firstDayString, lastDayString)
        
    else:
        print("Oops, not implemented!")


# Moves every value within an array
def PermuteArray(array):
    result = []
    #print('input: ', array)
    nbValues = len(array)
    for index in range(0, nbValues):
        result.append(array[(index - 1) % nbValues])
    #print('output: ', result)
    return result

   # TODO make singleton ?
